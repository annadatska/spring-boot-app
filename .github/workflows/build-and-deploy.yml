name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          java-package: jdk
          architecture: x64
          check-latest: false
          distribution: temurin
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN
          overwrite-settings: true

      - name: Build Spring Boot app
        run: ./mvnw clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Fetch latest git tag or use commit hash
        run: |
          TAG_VERSION=$(git describe --tags --abbrev=0 || git rev-parse --short HEAD)
          echo "VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "Tag version: $TAG_VERSION"

      - name: Build and tag  Docker image
        run: |
          IMAGE_NAME=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-app

          docker build -t $IMAGE_NAME:$VERSION .

      - name: List Docker Images (Debugging)
        run: docker images

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        run: |
          IMAGE_NAME=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-app

          docker push $IMAGE_NAME:$VERSION
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
    
      - name: Update helm chart image tag
        run: |
          sed -i "s/tag: .*/tag: $VERSION/" helm/values.yaml

      - name: Deploy with Helm
        run: |
          RELEASE_NAME="spring-app"
          NAMESPACE="springboot"
          RELEASE_EXISTS=$(helm list --namespace $NAMESPACE -q -f $RELEASE_NAME)

          if [ -z "$RELEASE_EXISTS" ]; then
            echo "Release $RELEASE_NAME not found. Deploying..."
            helm install $RELEASE_NAME helm --namespace $NAMESPACE
          else
            echo "Release $RELEASE_NAME found. Upgrading..."
            helm upgrade $RELEASE_NAME helm --namespace $NAMESPACE
          fi
        shell: bash
